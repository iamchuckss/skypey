{"version":3,"sources":["static-data.js","components/Empty.js","constants/action-types.js","reducers/index.js","reducers/user.js","reducers/messages.js","reducers/typing.js","reducers/contacts.js","reducers/activeUserId.js","store/index.js","components/Header.js","components/Chats.js","actions/index.js","containers/MessageInput.js","components/ChatWindow.js","components/Main.js","containers/User.js","components/Sidebar.js","containers/App.js","serviceWorker.js","index.js"],"names":["numberOfUsers","Empty","_ref","user","name","profile_pic","status","first_name","split","react_default","a","createElement","className","src","alt","shortid","require","txtgen","faker","_","users","Array","from","length","generateUser","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","numberOfMsgs","user_id","Object","objectSpread","v","i","number","text","sentence","is_user_msg","random","boolean","findName","email","internet","avatar","generate","SET_ACTIVE_USER_ID","SET_TYPING_VALUE","SEND_MESSAGE","combineReducers","state","arguments","undefined","action","type","_action$payload","payload","message","userId","allUserMsgs","keys","pop","defineProperty","typing","activeUserId","store","createStore","reducer","Header","Chat","concat","Chats","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","scrollToBottom","chatsRef","current","scrollTop","scrollHeight","React","createRef","ref","map","Chats_Chat","key","Component","setActiveUserId","id","MessageInput","value","getState","onSubmit","e","preventDefault","dispatch","onChange","target","placeholder","ChatWindow","activeUser","activeMsgs","components_Header","src_components_Chats","values","src_containers_MessageInput","Main","src_components_ChatWindow","src_components_Empty","handleUserClick","_ref2","User","onClick","bind","Sidebar","contact","src_containers_User","App","_store$getState","src_components_Sidebar","src_components_Main","Boolean","window","location","hostname","match","render","console","log","ReactDOM","es","src_containers_App","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06e9e9a0.chunk.js","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\n\nconst users = generateUsers(10);\nexport const contacts = _.mapKeys(users, \"user_id\");\nexport const getMessages = messagesPerUser => {\n  let messages = {};\n  _.forEach(users, user => {\n    messages[user.user_id] = {\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\n    };\n  });\n  return messages;\n};\n\n// just an example of how the state object is structured\nexport const state = {\n  user: generateUser(),\n  messages: getMessages(10),\n  typing: \"\",\n  contacts,\n  activeUserId: null\n};\n\n/**\n * @returns {Object} - a new user object\n */\nexport function generateUser() {\n  return {\n    name: faker.name.findName(),\n    email: faker.internet.email(),\n    profile_pic: faker.internet.avatar(),\n    status: txtgen.sentence(),\n    user_id: shortid.generate()\n  };\n}\n/**\n * @returns {Object} - a new message object\n */\nfunction generateMsg(number) {\n  return {\n    number,\n    text: txtgen.sentence(),\n    is_user_msg: faker.random.boolean()\n  };\n}\n/**\n *\n * @param {Number} numberOfUsers - the number of users to be generated\n * @param {Function} generateUser - function that generates a single user\n * @returns {Array} - an array of user objects with length n = numberOfUsers\n */\nfunction generateUsers(numberOfUsers) {\n  return Array.from({ length: numberOfUsers }, () => generateUser());\n}\n\nfunction generateMsgs(numberOfMsgs) {\n  return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\n}","import React from \"react\";\nimport \"./Empty.css\";\n\nconst Empty = ({ user }) => {\n  const { name, profile_pic, status } = user;\n  const first_name = name.split(\" \")[0];\n\n  return (\n    <div className=\"Empty\">\n      <h1 className=\"Empty__name\">Welcome, {first_name} </h1>\n      <img src={profile_pic} alt={name} className=\"Empty__img\" />\n      <p className=\"Empty__status\">\n        <b>Status:</b> {status}\n      </p>\n      <button className=\"Empty__btn\">Start a conversation</button>\n      <p className=\"Empty__info\">\n        Search for someone to start chatting with or go to Contacts to see who\n        is available\n      </p>\n    </div>\n  );\n};\n\nexport default Empty;\n","export const SET_ACTIVE_USER_ID = \"SET_ACTIVE_USER_ID\";\nexport const SET_TYPING_VALUE = \"SET_TYPING_VALUE\";\nexport const SEND_MESSAGE = \"SEND_MESSAGE\";","import { combineReducers } from \"redux\";\nimport contacts from \"./contacts\";\nimport user from \"./user\";\nimport activeUserId from \"./activeUserId\";\nimport messages from './messages';\nimport typing from \"./typing\";\n\nexport default combineReducers({\n    user,\n    messages,\n    typing,\n    contacts,\n    activeUserId,\n});","import { generateUser } from \"../static-data\";\nexport default function user(state = generateUser(), action) {\n  return state;\n};","import { getMessages } from \"../static-data\";\nimport { SEND_MESSAGE } from \"../constants/action-types\";\nimport _ from \"lodash\";\n\nexport default function messages(state = getMessages(10), action) {\n  switch (action.type) {\n    case SEND_MESSAGE:\n      const { message, userId } = action.payload;\n      const allUserMsgs = state[userId];\n      const number = +_.keys(allUserMsgs).pop() + 1;\n\n      return {\n        ...state,\n        [userId]: {\n          ...allUserMsgs,\n          [number]: {\n            number,\n            text: message,\n            is_user_msg: true\n          }\n        }\n      };\n\n    default:\n      return state;\n  }\n}","import { SET_TYPING_VALUE, SEND_MESSAGE } from \"../constants/action-types\";\n\nexport default function typing(state = \"\", action) {\n  switch (action.type) {\n    case SET_TYPING_VALUE:\n      return action.payload;\n    case SEND_MESSAGE:\n      return \"\";\n    default:\n      return state;\n  }\n}","import { contacts } from \"../static-data\";\n\nexport default (state = contacts , action) => {\n  return state;\n};","import { SET_ACTIVE_USER_ID } from \"../constants/action-types\";\n\nexport default function activeUserId(state = null, action) {\n  switch (action.type) {\n    case SET_ACTIVE_USER_ID:\n      return action.payload;\n    default:\n      return state;\n  }\n}","import { createStore } from \"redux\";\nimport reducer from \"../reducers\";\n\nconst store = createStore(reducer);\nexport default store;","import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header({ user }) {\n  const { name, status } = user;\n  return (\n    <header className=\"Header\">\n      <h1 className=\"Header__name\">{name}</h1>\n      <p className=\"Header__status\">{status}</p>\n    </header>\n  );\n}\n\nexport default Header;","import React, { Component } from \"react\";\nimport \"./Chats.css\";\n\nconst Chat = ({ message }) => {\n  const { text, is_user_msg } = message;\n  return (\n    <span className={`Chat ${is_user_msg ? \"is-user-msg\" : \"\"}`}>{text}</span>\n  );\n};\n\nclass Chats extends Component {\n  constructor(props) {\n    super(props);\n    this.chatsRef = React.createRef();\n  }\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n  scrollToBottom = () => {\n    this.chatsRef.current.scrollTop = this.chatsRef.current.scrollHeight;\n  };\n\n  render() {\n    return (\n      <div className=\"Chats\" ref={this.chatsRef}>\n        {this.props.messages.map(message => (\n          <Chat message={message} key={message.number} />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Chats;\n","import {\n  SET_ACTIVE_USER_ID,\n  SET_TYPING_VALUE,\n  SEND_MESSAGE,\n} from \"../constants/action-types\";\n\nexport const setTypingValue = value => ({\n  type: SET_TYPING_VALUE,\n  payload: value\n});\n\nexport const setActiveUserId = id => ({\n  type: SET_ACTIVE_USER_ID,\n  payload: id\n});\n\nexport const sendMessage = (message, userId) => ({\n  type: SEND_MESSAGE,\n  payload: {\n      message,\n      userId\n  }\n})","import React from \"react\";\nimport store from \"../store\";\nimport { setTypingValue, sendMessage } from \"../actions\";\nimport \"./MessageInput.css\";\n\nconst MessageInput = ({ value }) => {\n\n  //first retrieve the current state object\n  const state = store.getState();  \n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { typing, activeUserId } = state;\n    store.dispatch(sendMessage(typing, activeUserId));\n  };\n\n  const handleChange = e => {\n    store.dispatch(setTypingValue(e.target.value));\n  };\n\n  return (\n    <form className=\"Message\" onSubmit={handleSubmit}>\n      <input\n        className=\"Message__input\"\n        onChange={handleChange}\n        value={value}\n        placeholder=\"write a message\"\n      />\n    </form>\n  );\n};\n\nexport default MessageInput;","import React from \"react\";\nimport store from \"../store\";\nimport Header from \"../components/Header\";\nimport Chats from \"../components/Chats\";\nimport \"./ChatWindow.css\"\nimport MessageInput from \"../containers/MessageInput\"\nimport _ from \"lodash\";\n\nconst ChatWindow = ({ activeUserId }) => {\n  const state = store.getState();\n  const activeUser = state.contacts[activeUserId];\n  const activeMsgs = state.messages[activeUserId];\n  const { typing } = state;\n\n  return (\n    <div className=\"ChatWindow\">\n      <Header user={activeUser} />\n      <Chats messages={_.values(activeMsgs)} />\n      <MessageInput value={typing} />\n    </div>\n  );\n};\n\nexport default ChatWindow;","import React from \"react\";\nimport \"./Main.css\";\nimport Empty from \"../components/Empty\";\nimport ChatWindow from \"../components/ChatWindow\";\n\nconst Main = ({ user, activeUserId }) => {\n  const renderMainContent = () => {\n    if (!activeUserId) {\n      return <Empty user={user} activeUserId={activeUserId} />;\n    } else {\n      return <ChatWindow activeUserId={activeUserId} />;\n    }\n  };\n  return <main className=\"Main\">{renderMainContent()}</main>;\n};\n\nexport default Main;","import React from \"react\";\nimport \"./User.css\";\nimport { setActiveUserId } from \"../actions\";\nimport store from \"../store\"\n\nconst User = ({ user }) => {\n  const { name, profile_pic, status } = user;\n\n  return (\n    <div className=\"User\" onClick={handleUserClick.bind(null, user)}>\n      <img src={profile_pic} alt={name} className=\"User__pic\" />\n      <div className=\"User__details\">\n        <p className=\"User__details-name\">{name}</p>\n        <p className=\"User__details-status\">{status}</p>\n      </div>\n    </div>\n  );\n};\n\nfunction handleUserClick({ user_id }) {\n  store.dispatch(setActiveUserId(user_id));\n}\n\nexport default User;","import React from 'react';\nimport \"./Sidebar.css\";\nimport User from \"../containers/User\";\n\nconst Sidebar = ({ contacts }) => {\n  return (\n  \t<aside className=\"Sidebar\">\n  \t  {contacts.map(contact => <User user={contact} key={contact.user_id} />)}\n  \t</aside>\n  );\n};\n\nexport default Sidebar;","import React from 'react';\nimport Main from \"../components/Main\"\nimport Sidebar from \"../components/Sidebar\"\nimport './App.css';\nimport store from \"../store\"\nimport _ from \"lodash\";\n\nconst App = () => {\n  const { contacts, user, activeUserId } = store.getState();\n  return (\n    <div className=\"App\">\n      <Sidebar contacts={_.values(contacts)} />\n      <Main user={user} activeUserId={activeUserId} />\n    </div>\n  );\n};\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from \"react-dom\";\nimport { Provider } from 'react-redux';\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport store from \"./store\";\nimport * as serviceWorker from './serviceWorker';\n\nconst render = () => {\n  fancyLog();\n  return ReactDOM.render(\n  \t\t\t\t<Provider store={store}>\n                  <App/>\n                </Provider>\n                , document.getElementById(\"root\"));\n};\n\nrender();\nstore.subscribe(render);\nserviceWorker.unregister();\n\nfunction fancyLog() {\n  console.log(\"%c Rendered with 👉 👉👇\", \"background: purple; color: #fff\");\n  console.log(store.getState());\n}"],"sourceRoot":""}